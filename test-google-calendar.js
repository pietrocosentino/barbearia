const { 
    authenticateGoogle, 
    getCalendarClient, 
    getAvailableTimeSlots,
    isTimeSlotAvailable,
    createCalendarEvent,
    GOOGLE_CALENDAR_CONFIG 
} = require('./config/google-calendar');

// Fun√ß√£o para testar a configura√ß√£o
async function testGoogleCalendarSetup() {
    console.log('üß™ Testando configura√ß√£o do Google Calendar...\n');
    
    try {
        // Testar autentica√ß√£o
        console.log('1Ô∏è‚É£  Testando autentica√ß√£o...');
        const auth = await authenticateGoogle();
        
        if (!auth) {
            console.log('‚ùå Google Calendar n√£o configurado.');
            console.log('üìñ Execute: npm run authorize-google');
            console.log('üìñ Consulte: GOOGLE_CALENDAR_SETUP.md\n');
            return false;
        }
        
        console.log('‚úÖ Autentica√ß√£o bem-sucedida!\n');
        
        // Testar cliente do calend√°rio
        console.log('2Ô∏è‚É£  Testando cliente do calend√°rio...');
        const calendar = await getCalendarClient();
        console.log('‚úÖ Cliente do calend√°rio criado!\n');
        
        // Testar configura√ß√µes
        console.log('3Ô∏è‚É£  Verificando configura√ß√µes...');
        console.log('üìÖ ID do Calend√°rio:', GOOGLE_CALENDAR_CONFIG.CALENDAR_ID);
        console.log('‚è∞ Hor√°rio de funcionamento:', GOOGLE_CALENDAR_CONFIG.BUSINESS_HOURS.start, '-', GOOGLE_CALENDAR_CONFIG.BUSINESS_HOURS.end);
        console.log('üåç Timezone:', GOOGLE_CALENDAR_CONFIG.BUSINESS_HOURS.timezone);
        console.log('üìã Servi√ßos configurados:', Object.keys(GOOGLE_CALENDAR_CONFIG.SERVICE_DURATIONS).length);
        console.log('‚è±Ô∏è  Intervalo entre agendamentos:', GOOGLE_CALENDAR_CONFIG.APPOINTMENT_INTERVAL, 'minutos');
        console.log('‚úÖ Configura√ß√µes verificadas!\n');
        
        // Testar obten√ß√£o de hor√°rios dispon√≠veis
        console.log('4Ô∏è‚É£  Testando obten√ß√£o de hor√°rios dispon√≠veis...');
        const tomorrow = new Date();
        tomorrow.setDate(tomorrow.getDate() + 1);
        const dateStr = tomorrow.toISOString().split('T')[0];
        
        console.log('üìÖ Data de teste:', dateStr);
        const availableSlots = await getAvailableTimeSlots(dateStr, 'Corte');
        
        if (availableSlots.length > 0) {
            console.log('‚úÖ Hor√°rios dispon√≠veis encontrados:', availableSlots.length);
            console.log('‚è∞ Primeiros hor√°rios:', availableSlots.slice(0, 5).map(slot => slot.time).join(', '));
        } else {
            console.log('‚ö†Ô∏è  Nenhum hor√°rio dispon√≠vel para esta data');
        }
        console.log('');
        
        // Testar verifica√ß√£o de disponibilidade
        console.log('5Ô∏è‚É£  Testando verifica√ß√£o de disponibilidade...');
        if (availableSlots.length > 0) {
            const testTime = availableSlots[0].time;
            const isAvailable = await isTimeSlotAvailable(dateStr, testTime, 'Corte');
            console.log(`‚è∞ Hor√°rio ${testTime}: ${isAvailable ? '‚úÖ Dispon√≠vel' : '‚ùå Indispon√≠vel'}`);
        }
        console.log('');
        
        console.log('üéâ Todos os testes passaram!');
        console.log('üöÄ O Google Calendar est√° configurado e funcionando.\n');
        
        return true;
        
    } catch (error) {
        console.error('‚ùå Erro durante os testes:', error.message);
        console.log('\nüîß Solu√ß√µes poss√≠veis:');
        console.log('1. Execute: npm run authorize-google');
        console.log('2. Verifique o arquivo config/credentials.json');
        console.log('3. Consulte: GOOGLE_CALENDAR_SETUP.md\n');
        return false;
    }
}

// Fun√ß√£o para testar cria√ß√£o de evento
async function testEventCreation() {
    console.log('üéØ Testando cria√ß√£o de evento...\n');
    
    try {
        const testData = {
            nome: 'Cliente Teste',
            telefone: '(11) 99999-9999',
            email: 'teste@email.com',
            servico: 'Corte',
            data: '2024-01-15',
            horario: '10:00',
            observacoes: 'Agendamento de teste - Pode ser removido'
        };
        
        console.log('üìù Dados do teste:', testData);
        
        const result = await createCalendarEvent(testData);
        
        if (result.success) {
            console.log('‚úÖ Evento criado com sucesso!');
            console.log('üÜî ID do evento:', result.eventId);
            console.log('üîó Link do evento:', result.eventLink);
            console.log('\n‚ö†Ô∏è  Lembre-se de remover este evento de teste do calend√°rio!');
        } else {
            console.log('‚ùå Erro ao criar evento:', result.error);
        }
        
    } catch (error) {
        console.error('‚ùå Erro durante teste de cria√ß√£o:', error.message);
    }
}

// Fun√ß√£o principal
async function main() {
    console.log('üéØ DIFARIA style shapes - Teste do Google Calendar\n');
    
    const setupOk = await testGoogleCalendarSetup();
    
    if (setupOk) {
        console.log('ü§î Deseja testar a cria√ß√£o de um evento? (s/n)');
        process.stdin.once('data', async (data) => {
            const answer = data.toString().trim().toLowerCase();
            
            if (answer === 's' || answer === 'sim' || answer === 'y' || answer === 'yes') {
                await testEventCreation();
            } else {
                console.log('‚úÖ Teste conclu√≠do sem cria√ß√£o de evento.');
            }
            
            process.exit(0);
        });
    } else {
        process.exit(1);
    }
}

// Executar se chamado diretamente
if (require.main === module) {
    main().catch(console.error);
}

module.exports = { testGoogleCalendarSetup, testEventCreation };
